#!/usr/bin/env bash

# https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

error_msg(){
	echo -e "${RED}ERROR${NC}: $@"
}

success_msg(){
	echo -e "${GREEN}OK${NC}: $@"
}

warning_msg(){
	echo -e "${YELLOW}$@${NC}"
}

test_file(){
	# $1 = executable name
	# $2 = test file
	# $3 = 0 if test should succeed, 1 otherwise
	# $4 = 0 if should show output, 1 otherwise

	$1 <$2 &>/dev/null
	local result=$?

	if [[ $result -ne 0 ]] ; then
		if [[ $3 -ne 0 ]]; then
			success_msg "$2 (expected to fail)"
		else
			error_msg "$2 (expected to succeed)"
		fi
		return $result
	fi

	if [[ $3 -eq 0 ]]; then
		success_msg "$2 (expected to fail)"
	else
		error_msg "$2 (expected to succeed)"
	fi

	if [[ $4 -eq 0 ]]; then
		$1 <$2 2>/dev/stdout
		echo ""
	fi

	return $result
}

test_dir(){
	# $1 = executable name
	# $2 = test dir
	# $3 = 0 if test should succeed, 1 otherwise
	# $4 = 0 if should show output, 1 otherwise

	local testfiles=$(find $2 -type f -name "*.c")
	local total="$(echo ${testfiles} | wc -w)"
	local success=0
	local fail=0
	local expected=$3

	for testfile in ${testfiles}; do
		# https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash
		expected=$3
		if [[ ${testfile} =~ "FAIL" ]]; then
			expected=1
		fi

		# https://stackoverflow.com/questions/21035121/increment-variable-value-by-1-shell-programming
		test_file $1 ${testfile} ${expected} $4 2>/dev/null
		if [[ $? -eq 0 ]]; then
			if [[ ${expected} -eq 0 ]]; then
				success=$((success+1))
			else
				fail=$((fail+1))
			fi
		else
			if [[ ${expected} -eq 0 ]]; then
				fail=$((fail+1))
			else
				success=$((success+1))
			fi
		fi
	done

	warning_msg "\nTEST SUMMARY - $2"
	echo -e "${RED}Fail${NC}: ${fail}/${total}"
	echo -e "${GREEN}OK${NC}:   ${success}/${total}"
}

usage(){
	echo "Usage: $(basename $0) [-p program] [-f] [-s] [file|dir]"
	echo -e "\t-p the name of the parser (mandatory, defaults to './myparser')"
	echo -e "\t-f informs that all tests are expected to fail (optional)"
	echo -e "\t-s supress part of the output (optional)"
	echo -e "Obs: if the file has 'FAIL' in its name, then it is expected to fail"
	exit
}



executable="./myparser"
fails=0
silent=0
while getopts 'sfp:h' opt; do
	case "$opt" in
		f)
		  fails=1
		  ;;
		p)
		  executable="$OPTARG"
		  ;;
		s)
		  silent=1
		  ;;
		?|h)
		  usage
		  ;;
	esac
done

if test -z ${executable}; then
	usage
fi


# according to chatgpt this removes parsed options from $@
shift $((OPTIND - 1))

if test $# -eq 0; then
	usage
fi


testing="$1"
if test -f ${testing}; then
	if [[ ${testing} =~ "FAIL" ]]; then
		fails=1
	fi
	test_file ${executable} ${testing} ${fails} ${silent}
else
	test_dir ${executable} ${testing} ${fails} ${silent}
fi
